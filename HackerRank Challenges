/*
Revising the Select Query I: Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for 
America is USA.
*/
SELECT * FROM CITY
    WHERE POPULATION > 100000 AND COUNTRYCODE = "USA";

/*
Revising the Select Query II: Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for 
America is USA.
*/
SELECT NAME FROM CITY
    WHERE POPULATION > 120000 AND COUNTRYCODE = "USA";

/*
Select All: Query all columns (attributes) for every row in the CITY table.
*/
SELECT * FROM CITY;

/*
Select by ID: Query all columns for a city in CITY with the ID 1661.
*/
SELECT * FROM CITY
    WHERE ID = 1661;

/*
Japanese Cities' Attributes: Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
*/
SELECT * FROM CITY
    WHERE COUNTRYCODE = "JPN";

/*
Japanese Cities' Names: Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
*/
SELECT NAME FROM CITY
    WHERE COUNTRYCODE = "JPN";

/*
Weather Observation Station 1: Query a list of CITY and STATE from the STATION table.
*/
SELECT CITY, STATE FROM STATION;

/*
Weather Observation Station 3: Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but 
exclude duplicates from the answer.
*/
SELECT DISTINCT CITY FROM STATION
    WHERE ID % 2 = 0;

/*
Weather Observation Station 4: Find the difference between the total number of CITY entries in the table and the number of distinct CITY 
entries in the table.
*/
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

/*
Weather Observation Station 5: Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths 
(i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
*/
SELECT CITY, LENGTH(CITY) FROM STATION
    ORDER BY LENGTH(city), city ASC
    LIMIT 1;
SELECT CITY, LENGTH(CITY) FROM STATION
    ORDER BY LENGTH(CITY) DESC
    LIMIT 1;

/*
Weather Observation Station 6: Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. 
Your result cannot contain duplicates.
*/
SELECT CITY FROM STATION WHERE (SELECT SUBSTRING(CITY, 1, 1) IN ('A', 'E', 'I', 'O', 'U'));

/*
Weather Observation Station 7: Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE (SELECT SUBSTRING(CITY, -1, 1) IN ('A', 'E', 'I', 'O', 'U'));

/*
Weather Observation Station 8: Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last 
characters. Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE CITY regexp '^[AEIOU]' AND CITY regexp '[aeiou]$';

/*
Weather Observation Station 9: Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE CITY regexp '^[^AEIOU]';

/*
Weather Observation Station 10: Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE CITY regexp '[^aeiou]$';

/*
Weather Observation Station 11: Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. 
Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE CITY regexp '^[^AEIOU]' OR CITY regexp '[^aeiou]$';

/*
Weather Observation Station 12: Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. 
Your result cannot contain duplicates.
*/
SELECT DISTINCT CITY FROM STATION WHERE CITY regexp '^[^AEIOU]' AND CITY regexp '[^aeiou]$';

/*
Higher Than 75 Marks: Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters 
of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by 
ascending ID.
*/
SELECT Name FROM STUDENTS
    WHERE Marks > 75
    ORDER BY RIGHT(name, 3), ID ASC;
    
/*
Employee Names: Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
*/
SELECT name FROM Employee
    ORDER BY name;

/*
Employee Salaries: Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than
$2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.
*/
SELECT name from Employee
    WHERE salary > 2000 and months < 10
    ORDER BY employee_id ASC;

/*
Type of Triangles: Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
*/
SELECT CASE
        WHEN a + b <= c or a + c <= b or b + c <= a then 'Not A Triangle'
        WHEN a = b and b = c then 'Equilateral'
        WHEN a = b or b = c or a = c then 'Isosceles'
        ELSE 'Scalene'
    END
    FROM TRIANGLES;

/*
The PADS: Generate the following two result sets:
1. Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a 
parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
2. Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
There are a total of [occupation_count] [occupation]s. where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and 
[occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
*/
SELECT CONCAT(name,'(',SUBSTRING(OCCUPATIONS, 1, 1),')') 
    FROM OCCUPATIONS 
    ORDER BY name ASC;

SELECT 'There are a total of ', COUNT(occupation), ' ', CONCAT(LOWER(occupation), 's.')
    FROM OCCUPATIONS
    GROUP BY occupation
    ORDER BY COUNT(occupation) ASC, occupation;

/*
Revising Aggregations - The Count Function: Query a count of the number of cities in CITY having a Population larger than 100,000.
*/
SELECT COUNT(ID) FROM CITY
    WHERE Population > 100000;

/*
Revising Aggregations - The Sum Function: Query the total population of all cities in CITY where District is California.
*/
SELECT SUM(population) FROM CITY WHERE District = 'California';

/*
Revising Aggregations - Averages: Query the average population of all cities in CITY where District is California.
*/
SELECT AVG(population) FROM CITY WHERE District = 'California';

/*
Average Population: Query the average population for all cities in CITY, rounded down to the nearest integer.
*/
SELECT ROUND(AVG(population)) FROM CITY;

/*
Japan Population: Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
*/
SELECT SUM(population) FROM CITY WHERE COUNTRYCODE = 'JPN';

/*
Population Density Difference: Query the difference between the maximum and minimum populations in CITY.
*/
SELECT MAX(population) - MIN(population) FROM CITY;

/*
Weather Observation Station 2: Query the following two values from the STATION table:
1. The sum of all values in LAT_N rounded to a scale of  decimal places.
2. The sum of all values in LONG_W rounded to a scale of  decimal places.
*/
SELECT ROUND(SUM(lat_n), 2), ROUND(SUM(long_w), 2) FROM STATION;

/*
Weather Observation Station 13: Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. 
Truncate your answer to 4 decimal places.
*/
SELECT TRUNCATE(SUM(lat_n), 4) FROM STATION
    WHERE lat_n > 38.7880 AND lat_n < 137.2345;

/*
Weather Observation Station 14: Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer 
to 4 decimal places.
*/
SELECT TRUNCATE(MAX(lat_n), 4) FROM STATION
    WHERE lat_n < 137.2345;

/*
Weather Observation Station 15: Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. 
Round your answer to 4 decimal places.
*/
SELECT ROUND(long_w, 4) FROM STATION
    WHERE lat_n = (SELECT MAX(lat_n) FROM STATION WHERE lat_n < 137.2345);

/*
Weather Observation Station 16: Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7880. Round your answer to 4 decimal 
places.
*/
SELECT ROUND(lat_n, 4) FROM STATION
    WHERE lat_n = (SELECT MIN(lat_n) FROM STATION WHERE lat_n > 38.7780);

/*
Weather Observation Station 17: Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7880. 
Round your answer to 4 decimal places.
*/
SELECT ROUND(long_w, 4) FROM STATION
    WHERE lat_n = (SELECT MIN(lat_n) FROM STATION WHERE lat_n > 38.7780);

/*
Weather Observation Station 18: Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.
*/
SELECT ROUND((MAX(lat_n)-MIN(lat_n)) + (MAX(long_w)-MIN(long_w)), 4)
    FROM STATION;

/*
Weather Observation Station 19: Consider P1(a,b) and P2(c,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values 
of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.
*/
SELECT ROUND(SQRT(POWER(MAX(lat_n)-MIN(lat_n), 2) + POWER(MAX(long_w)-MIN(long_w), 2)), 4) FROM STATION;

/*
Population Census: Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.
*/
SELECT SUM(CITY.population) FROM CITY
    JOIN COUNTRY
    ON CITY.COUNTRYCODE = COUNTRY.CODE
    WHERE CONTINENT = 'Asia';

/*
African Cities: Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
*/
SELECT CITY.name FROM CITY
    JOIN COUNTRY
    ON CITY.COUNTRYCODE = COUNTRY.CODE
    WHERE COUNTRY.CONTINENT = 'Africa';

/*
Average Population of Each Continent: Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective 
average city populations (CITY.Population) rounded down to the nearest integer.
*/
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION)) FROM COUNTRY
    JOIN CITY
    ON COUNTRY.CODE = CITY.COUNTRYCODE
    GROUP BY COUNTRY.CONTINENT;

/*
The Report: You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.Ketty gives Eve 
a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower 
than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade 
(8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name 
and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular 
students by their marks in ascending order. Write a query to help Eve.
*/
SELECT IF(GRADES.Grade>=8, STUDENTS.Name, 'NULL'), GRADES.Grade, STUDENTS.Marks 
    FROM STUDENTS
    JOIN GRADES
    ON STUDENTS.Marks BETWEEN Min_Mark and Max_Mark
    ORDER BY GRADES.Grade DESC, STUDENTS.Name ASC;
